# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-01-03 20:22
from django.db import migrations

def forwards_func(apps, schema_editor):
    """Adds the string representing twitter accounts of events to the twitter account table and connects events with these accounts"""
    Event = apps.get_model('events', 'Event')
    TwitterAccount = apps.get_model('twitter', 'TwitterAccount')

    db_alias = schema_editor.connection.alias

    account_id_dict = {
        'streetcoverage': 3079082955,
        'coverage_le': 4884120381,
        'coverage_che': 707960814423166978,
        'reDDakteur': 97706519,
        'streetphotose': 705825972617125888,
        'MDR_SN': 581765861,
        'durchgezaehlt': 3224192729,
        'FelixMSteiner': 1976366144,
        'SimonTelemann': 4533756861,
    }

    event_account_dict = {}

    for event in Event.objects.using(db_alias).all():
        event_account_dict[event.id] = []
        for account in event.twitter_account_names.split(','):
            if account:
                try:
                    new_account = TwitterAccount.objects.using(db_alias).get(name=account)
                except TwitterAccount.DoesNotExist:
                    new_account = TwitterAccount.objects.using(db_alias).create(name=account, account_id=account_id_dict[account], last_known_tweet_id="")
                event_account_dict[event.id].append(new_account)

    for event_id in event_account_dict:
        for account in event_account_dict[event_id]:
            account.events.add(event_id)


def reverse_func(apps, schema_editor):
    """The reverse of the above"""
    Event = apps.get_model('events', 'Event')
    TwitterAccount = apps.get_model('twitter', 'TwitterAccount')

    db_alias = schema_editor.connection.alias

    event_account_dict = {}

    for account in TwitterAccount.objects.using(db_alias).all():
        for event in account.events.all():
            if not event.id in event_account_dict:
                event_account_dict[event.id] = []
            event_account_dict[event.id].append(account.name)

    for event_id in event_account_dict:
        event = Event.objects.using(db_alias).get(id=event_id)
        event.twitter_account_names =  ','.join(event_account_dict[event_id])
        event.save()


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0004_remove_event_twitter_hashtags'),
        ('twitter', '0004_twitteraccount_events'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
